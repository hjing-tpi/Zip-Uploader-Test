#Parse build data passed in and populate IDs, options and part numbers
#This Script is expected to set the out parameters below
#
#TPass Objects Passed In/Returned
#   in - string "RunTestCycleId" - Id passed into the RunTestCycle() method
#   in - string "BuildData" - Build data sent from the option retrieval script
#   in  - object "MainTPassScripting" - Exposed methods and properties for the scripts to use
#   in  - method "TPassLogger" - This is the logging method to log to the main TPass log file
#   in  - method "TestAppLogger" - This is the logging method to log to the TPass Test Application log file
#   in  - method "GetConfigurationValue" - This is the method to get values set in the System Configuration file
#   out - string "primaryId"
#   out - string "secondaryId"
#   out - string "tertiaryId"
#   out - string "quaternaryId"
#   out - string "quinaryId"
#   out - list<string> "OptionCodesInBuildData"
#   out - dictionary<string,string> "PartNumbers"
#   out - bool "isSuccess"
#   out - bool "production"
#   out - string "version"
#

from System.Text.RegularExpressions import Regex
import clr
## Note this reference is required in order to access the Colors for the Background
clr.AddReferenceByPartialName("PresentationCore")
from System.Windows.Media import Brushes

production = False
version = "10"

#########################################################################################################################################
# Application Engineer:  Set Part Number Tag Names required for Test Application and the Test Application Script File Name
#
partNumberTags = set(["IPC","ICS","TCM","IRC","AMP","SDM","UPA","AOS","FCM","VPM","BCM","CGM","CSM","ONS","SIB","LRR","HFP","HFPF","HFPR","RAD","PEPS","HVAC","MSM","MSMP","SADS","VCU","MFC","AFL","TCP","DMS","EBOOST","ELM","EOCM","HDLM","MSB","PAM","PFCM","LGM","SCL","VKM","WCM","BCMOPSOFT","CSMOPSOFT","ECC","EBCM","DCM","NVM","ICCM","MSMD","FPI","RSI","PTM","ACP","SAMLF","SAMRF","SAMLR","SAMRR","ACP4","MFCM","MSMRR","MSMLR"])                                                                                                                                                                                                                                                                                
evaluateStaticHold = False
evaluateFlashHold = False
#
#########################################################################################################################################
#########################################################################################################################################
# Software Engineer: This box is used for debugging purposes, comment out when done manually testing. 
from System.Collections.Generic import List, Dictionary
#BuildData = """FLASHHOLD=F,STATICHOLD=F,PVIF=221000010,PVI=000010,VIN=1GT40FDA1NU000001,MDYR=N,CSN=1ZZ0100001 ,ASSM=1,PDYR=2022,MD=35743  ,RP01=MAH,RP02=,
#RP03=1SD,RP04=1SZ,RP05=2NF,RP06=2ST,RP07=3ST,RP08=4FT,RP09=4ST,RP10=5A7,RP11=5C6,RP12=5FC,RP13=5GD,RP14=5KM,RP15=5ST,RP16=65C,RP17=6AM,RP18=7AM,RP19=8AM,RP20=9AM,
#RP21=9L3,RP22=A2X,RP23=A45,RP24=A50,RP25=A7K,RP26=AGJ,RP27=AHV,RP28=AJ7,RP29=AKO,RP30=AL0,RP31=ARU,RP32=AT8,RP33=ATH,RP34=AU3,RP35=AVI,RP36=AVK,RP37=AVU,RP38=AXK,RP39=B0S,
#RP40=BG9,RP41=BKA,RP42=BKD,RP43=BOY,RP44=BS1,RP45=BTM,RP46=BTT,RP47=BTV,RP48=BVZ,RP49=C49,RP50=,RP51=CC3,RP52=CE1,RP53=CGN,RP54=CJ4,RP55=CTT,RP56=DEA,RP57=DEH,RP58=DNS,
#RP59=DRZ,RP60=E63,RP61=EBI,RP62=EF7,RP63=EN1,RP64=EN5,RP65=EPH,RP66=ETN,RP67=F45,RP68=F47,RP69=,RP70=FJP,RP71=FX3,RP72=G93,RP73=G94,RP74=GAZ,RP75=GQO,RP76=H9Z,RP77=HS1,
#RP78=IKP,RP79=IOK,RP80=J22,RP81=J77,RP82=JAD,RP83=JCF,RP84=JFI,RP85=EN0,RP86=JSZ,RP87=K12,RP88=,RP89=K4C,RP90=KA1,RP91=KA6,RP92=KC9,RP93=KI3,RP94=KI4,RP95=KQV,RP96=KRV,
#RP97=KSG,RP98=KTI,RP99=KWP,RP100=LHD,RP101=,RP102=MF1,RP103=N38,RP104=NCG,RP105=NF6,RP106=NP5,RP107=NYS,RP108=NZZ,RP109=OAR,RP110=P79,RP111=PPW,RP112=PSC,RP113=PTT,
#RP114=PZ8,RP115=QK2,RP116=QMG,RP117=QT5,RP118=R6F,RP119=R7E,RP120=R9N,RP121=RCS,RP122=RSR,RP123=S6L,RP124=S8L,RP125=SDA,RP126=SLM,RP127=SNR,RP128=T4L,RP129=T8Z,RP130=TDM,
#RP131=THS,RP132=TQ5,RP133=TRJ,RP134=U2K,RP135=U91,RP136=UBD,RP137=UBI,RP138=UDV,RP139=UE1,RP140=UE4,VPRG=UF2UFBUG,VSFT=1UGNUITU,VENG=DXL8XRLY,VFUL=F5YM8Z6X,VSYS=Z       ,
#VSPD=        ,VTRN=        ,VMUP=        ,TBPN=        ,TPRG=        ,TACC=        ,TSTR=        ,TLGT=        ,TWRN=        ,TSEC=        ,"""
OptionCodesInBuildData = List[str]()
PartNumbers = Dictionary[str,str]()
RunTestCycleId = "1"
#
#########################################################################################################################################

try:
    flashHold = True
    staticHold = True
    evVehicle = False
    primaryId = RunTestCycleId
    secondaryId = ""
    tertiaryId = ""
    quaternaryId = ""
    quinaryId = ""
    TPassLogger.Debug("Option Parsing Script:  Product Id = {0}", primaryId)
    TPassLogger.Debug("Option Parsing Script:  Product Build Data = {0}", BuildData)

    keyValuePairs = BuildData.Split(',')
    if keyValuePairs[0] != BuildData:
        for keyValuePair in keyValuePairs:
            keyarray = keyValuePair.Split('=')
            #TPassLogger.Debug("Option Parsing Script:  keyValuePair = {0}", keyValuePair)
            if len(keyarray) != 2:
                TPassLogger.Info("Option Parsing Script:  Not Key=Value format  Data = {0}", keyValuePair)
                continue
            key = keyarray[0].Trim().ToUpper()
            value = keyarray[1].ToUpper()

            # Example ways of setting different IDs
            if (key == "VIN"):
                secondaryId = value
                if (len(value) > 9 and value[9] == 'P'):
                    OptionCodesInBuildData.Add("MY23")
                if (len(value) > 9 and value[9] == 'R'):
                    OptionCodesInBuildData.Add("MY24")
                if (len(value) > 9 and value[9] == 'S'):
                    OptionCodesInBuildData.Add("MY25")
                if (len(value) > 9 and value[9] == 'T'):
                    OptionCodesInBuildData.Add("MY26")
                if (len(value) > 9 and value[9] == 'V'):
                    OptionCodesInBuildData.Add("MY27")
                if (len(value) > 9 and value[9] == 'W'):
                    OptionCodesInBuildData.Add("MY28")
                if (len(value) > 9 and value[9] == 'X'):
                    OptionCodesInBuildData.Add("MY29")
            #elif (key == "MDYR"):
            #    tertiaryId = value
            #elif (key == "PDYR"):
            #    quaternaryId = value
            #elif (key == "CSN"):
            #    quinaryId = value

            ## If Set to P then these two RPOs have Passed Flashhold or Statichold
            if (key=="FLASHHOLD" and value == "P"):
                flashHold = False
            if (key=="STATICHOLD" and value == "P"):
                staticHold = False

            # Populate Option Codes found in broadcasted build data
            if Regex.IsMatch(key, "\\ARP\\d") and value != "":
                TPassLogger.Debug("Option Parsing Script: RPO Found, RPO = {0}, Value = {1}", key, value)
                OptionCodesInBuildData.Add(value)
                TPassLogger.Debug("Option Parsing Script: Added Configured Option Code ({0}) found in build data", value)

            # Populate interested Part Numbers that are in the Broadcasted Build Data
            if key in partNumberTags:
                if PartNumbers.ContainsKey(key):
                    TPassLogger.Warn("Option Parsing Script: Part Tag ({0}, {1}) found twice in build data.  First occurrence will be used", key, value)
                else:
                    TPassLogger.Info("Option Parsing Script: Added Part ({0}, {1}) found in build data", key, value)
                    PartNumbers.Add(key, value)    

        # Add RPOs for EV
        if (OptionCodesInBuildData.Contains("EN0")):    #Engine none
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 Exist, EV Vehicle", False, False)
            evVehicle = True
            if (OptionCodesInBuildData.Contains("MAH") or OptionCodesInBuildData.Contains("MBC") or OptionCodesInBuildData.Contains("MCX") or OptionCodesInBuildData.Contains("MBD") or OptionCodesInBuildData.Contains("MAW")):
                MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and (NA RPO) Exist, adding RPOs USDC and USAC", False, False)
                TPassLogger.Info("Option Parsing Script: EN0 and (NA RPO) Exist, adding RPOs USDC and USAC")
                OptionCodesInBuildData.Add("USDC")
                OptionCodesInBuildData.Add("USAC")
                isSuccess = True
                ## South American Andean Region addon part
            elif (OptionCodesInBuildData.Contains("MAY")):
                MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and (MAY RPO) Exist, Checking Country Code", False, False)
                TPassLogger.Info("Option Parsing Script: EN0 and (MAY RPO) Exist, Checking Country Code")
                if(OptionCodesInBuildData.Contains("K28") or OptionCodesInBuildData.Contains("K2O")):
                    MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and (NA RPO) Exists For South American Andean Region, adding RPOs USDC and USAC", False, False)
                    TPassLogger.Info("Option Parsing Script: EN0 and (NA RPO) Exists For South American Andean Region, adding RPOs USDC and USAC")
                    OptionCodesInBuildData.Add("USDC")
                    OptionCodesInBuildData.Add("USAC")
                    isSuccess = True
                elif(OptionCodesInBuildData.Contains("K2W") or OptionCodesInBuildData.Contains("K29")):
                    MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and EU Exist Exists For South American Andean Region, adding RPOs EUDC and EUAC", False, False)
                    TPassLogger.Info("Option Parsing Script: EN0 and (EU RPO) Exists For South American Andean Region, adding RPOs EUDC and EUAC")
                    OptionCodesInBuildData.Add("EUDC")
                    OptionCodesInBuildData.Add("EUAC")
                    isSuccess = True
                ## Send an Error if we have MAY in the build data but not K2O, K2W, or K29 
                else:
                    isSuccess = True
            ## More Exports
            elif (OptionCodesInBuildData.Contains("MBM") or OptionCodesInBuildData.Contains("MAM") or OptionCodesInBuildData.Contains("MBI") or OptionCodesInBuildData.Contains("MBB") or OptionCodesInBuildData.Contains("MBA") or OptionCodesInBuildData.Contains("MBR")  ):
                MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and EU Exist, adding RPOs EUDC and EUAC", False, False)
                TPassLogger.Info("Option Parsing Script: EN0 and EU Exist, adding RPOs EUDC and EUAC")
                OptionCodesInBuildData.Add("EUDC")
                OptionCodesInBuildData.Add("EUAC")
                isSuccess = True
            ## Japan And China
            elif OptionCodesInBuildData.Contains("MAS"):
                MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and JP Exist, adding RPOs JPDC and JPAC", False, False)
                TPassLogger.Info("Option Parsing Script: EN0 and JP Exist, adding RPOs JPDC and JPAC")
                OptionCodesInBuildData.Add("JPDC")
                OptionCodesInBuildData.Add("JPAC")
                isSuccess = True
            elif OptionCodesInBuildData.Contains("MAO"):
                MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "EN0 and CH Exist, adding RPOs CHDC and CHAC", False, False)
                TPassLogger.Info("Option Parsing Script: EN0 and CH Exist, adding RPOs CHDC and CHAC")
                OptionCodesInBuildData.Add("CHDC")
                OptionCodesInBuildData.Add("CHAC")
                isSuccess = True
    else:
        isSuccess = False

    # Logic to not run the test cycle if a FLASH or STATIC Hold code has not cleared or if non EV vehicle
    if (evaluateStaticHold and staticHold and BuildData != ""):
        TPassLogger.Info("Option Parsing Script: STATICHOLD not cleared on vehicle, Test Cycle will not run. DPN = " + primaryId)
        try:
            AlertMessage = """<fontsize:32> >: Option Parsing Script", "STATICHOLD not cleared on vehicle, Test Cycle will not run.  DPN = {primaryId}  </fontsize>""".format(primaryId = primaryId)
            TPassLogger.Info("Option Parsing Script: STATICHOLD not cleared on vehicle, adding STATICHOLD RPO")
            MainTPassScripting.Alert("STATICHOLD RPO ALERT", AlertMessage, 42.0, Brushes.Red)
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "STATICHOLD not cleared on vehicle, Test Cycle will not run.  DPN =" + primaryId, True, False)
            OptionCodesInBuildData.Add("STATICHOLD")
        except Exception as ex:
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "STATICHOLD not cleared on vehicle, adding STATICHOLD RPO", False, False)
            TPassLogger.Info("Option Parsing Script: STATICHOLD not cleared on vehicle, adding STATICHOLD RPO")
            OptionCodesInBuildData.Add("STATICHOLD")
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "STATICHOLD not cleared on vehicle, Test Cycle will not run.  DPN = " + primaryId, True, True)
            TPassLogger.Info("Option Parsing Script: Exception occured " + ex)
        isSuccess = False
    elif (evaluateFlashHold and flashHold and BuildData != ""):
        TPassLogger.Info("Option Parsing Script: FLASHHOLD not cleared on vehicle, Test Cycle will not run DPN = " + primaryId)
        try:
            AlertMessage = """<fontsize:32> >: Option Parsing Script", "FLASHHOLD not cleared on vehicle, Test Cycle will not run.  DPN = = {primaryId}  </fontsize>""".format(primaryId = primaryId)
            TPassLogger.Info("Option Parsing Script: FLASHHOLD not cleared on vehicle, adding FLASHHOLD RPO")
            MainTPassScripting.Alert("FLASHHOLD RPO ALERT", AlertMessage, 32.0, Brushes.Red)
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "FLASHHOLD not cleared on vehicle, Test Cycle will not run.  DPN = " + primaryId, True, False)
            OptionCodesInBuildData.Add("FLASHHOLD")
        except Exception as ex:
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "FLASHHOLD not cleared on vehicle, adding FLASHHOLD RPO", False, False)
            TPassLogger.Info("Option Parsing Script: FLASHHOLD not cleared on vehicle, adding FLASHHOLD RPO")
            OptionCodesInBuildData.Add("FLASHHOLD")
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "FLASHHOLD not cleared on vehicle, Test Cycle will not run.  DPN = " + primaryId, True, True)
            TPassLogger.Info("Option Parsing Script: Exception occured " + ex)
        isSuccess = False
    elif (evVehicle == False and BuildData != ""):
        TPassLogger.Info("Option Parsing Script: No EV EN0 RPO, Test Cycle will not run. DPN = " + primaryId)
        try:
            AlertMessage = """<fontsize:32> >: Option Parsing Script", "No EV EN0 RPO, Test Cycle will not run.  DPN =  {primaryId} </fontsize>""".format(primaryId = primaryId)
            MainTPassScripting.Alert("No EV Vehicle Alert", AlertMessage, 32.0, Brushes.Red)
        except Exception as ex:
            MainTPassScripting.InterfaceUiLogger("Option Parsing Script", "No EV EN0 RPO, Test Cycle will not run.  DPN = " + primaryId, True, True)
            TPassLogger.Info("Option Parsing Script: Exception occured " + ex)
        isSuccess = False

    TPassLogger.Info("Option Parsing Script:  Product Primary ID = {0}", primaryId)

except Exception as inst:
    TPassLogger.Warn("Option Parsing Script:  Exception Occurred :{0}", inst)
    TPassLogger.Warn("Option Parsing Script:  Processing Failed.")
    isSuccess = False
TPassLogger.Info("Option Parsing Script:  Is Success = {0}", isSuccess)

############################################################
# Change History
############################################################
#   Date 08092024
#   Version: 10
#   Change: Added disable for invalid data retrieval from a wrong PVIF scan, removed uncertifiedRPos variable, no longer in use due to validation.
#   Date 11282023
#   Version: 9
#   Change: Added logic to disable Option Parsing to prevent testing of Japan, China
#   "uncertifiedRPOS = False" at the top, added MAY RPOs and K2O, K28, K2W and more region codes.
#	Date: 04112023
#   Date 06282023
#   Version: 8
#   Change: Added Alert Screen from TPass 1.5.0.11, and except statement for backwards compatibility.
#	Date: 04112023
#	Version: 7
#	Change: Fixed logic for setting up EV RPOs and added FLASHHOLD and STATICHOLD logic.  For SpringHill
#           FLASH and STATIC will be combined from GEPICS with Tag=STATICHOLD.
#           Also added logic to only run test if an EV vehicle
#	Date: 04112023
#	Version: 6.2
#	Change: Added EUDC and EUAC for MBM RPO
#	Date: 03082023
#	Version: 6.1
#	Change: Added more tags to list
#	Date: 10212022
#	Version: 6.0
#	Change: Added model year option based on VIN 10th digit
#	Date: 07142022
#	Version: 5.0
#	Change: Added more tags to list
#	Date: 0809021
#	Version: 4.0
#	Change: If duplicate Part tag in build data, use first occurrence and log warning
#	Date: 08042021
#	Version: 3.0
#	Change: Set Secondary Id to the VIN
#	Date: 08032021
#	Version: 2.0
#	Change: Fixed issue with having trailing comma causing exception
#	Date: 04152021
#	Version: 1.0
#	Change: Initial Version
############################################################

